import { ERR_INVALID_ALGORITHM, ERR_INVALID_HASH, ERR_INVALID_UPPER, ERR_UNKNOWN_PARSE, } from './errors.js';
import { resolveID } from './resolve.js';
import { hash } from './utils.js';
export const getHWID = async (options) => {
    var _a, _b, _c;
    if ((options === null || options === void 0 ? void 0 : options.hash) !== undefined && typeof options.hash !== 'boolean') {
        throw ERR_INVALID_HASH;
    }
    if ((options === null || options === void 0 ? void 0 : options.algorithm) !== undefined &&
        typeof options.algorithm !== 'string') {
        throw ERR_INVALID_ALGORITHM;
    }
    if ((options === null || options === void 0 ? void 0 : options.upper) !== undefined && typeof options.upper !== 'boolean') {
        throw ERR_INVALID_UPPER;
    }
    const hwid = await resolveID();
    if (hwid === '')
        throw ERR_UNKNOWN_PARSE;
    const shouldHash = (_a = options === null || options === void 0 ? void 0 : options.hash) !== null && _a !== void 0 ? _a : false;
    const hashed = shouldHash ? hash(hwid, (_b = options === null || options === void 0 ? void 0 : options.algorithm) !== null && _b !== void 0 ? _b : 'sha256') : hwid;
    return ((_c = options === null || options === void 0 ? void 0 : options.upper) !== null && _c !== void 0 ? _c : false) ? hashed.toUpperCase() : hashed.toLowerCase();
};
export { getHWID as default };
